{"version":3,"file":"SharedElement.js","sourceRoot":"","sources":["../src/SharedElement.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,EAAE,IAAI,EAAE,cAAc,EAAa,MAAM,cAAc,CAAC;AAS/D,MAAM,UAAU,WAAW,CACzB,GAAQ,EACR,QAAkB,EAClB,cAAoB;IAEpB,MAAM,UAAU,GAAG,GAAG,CAAC,CAAC,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;IACzD,OAAO,UAAU;QACf,CAAC,CAAC;YACE,GAAG;YACH,UAAU;YACV,QAAQ,EAAE,QAAQ,IAAI,KAAK;YAC3B,cAAc;SACf;QACH,CAAC,CAAC,IAAI,CAAC;AACX,CAAC;AAED,MAAM,OAAO,aAAc,SAAQ,KAAK,CAAC,SAA6B;IAAtE;;QAOU,UAAK,GAA6B,IAAI,CAAC;QAEvC,aAAQ,GAAG,CAAC,GAAQ,EAAE,EAAE;YAC9B,IAAI,CAAC,KAAK,GAAG,WAAW,CAAC,GAAG,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;YAC1C,IAAI,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE;gBACrB,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;aAC/B;QACH,CAAC,CAAC;IASJ,CAAC;IAtBC,kBAAkB,CAAC,SAA6B;QAC9C,IAAI,CAAC,SAAS,CAAC,MAAM,IAAI,IAAI,CAAC,KAAK,CAAC,MAAM,IAAI,IAAI,CAAC,KAAK,EAAE;YACxD,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SAC/B;IACH,CAAC;IAWD,MAAM;QACJ,MAAM,EACJ,MAAM,EAAE,uDAAuD;QAC/D,GAAG,UAAU,EACd,GAAG,IAAI,CAAC,KAAK,CAAC;QACf,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,WAAW,CAAC,CAAC,KAAK,CAAC,CAAC,IAAI,UAAU,CAAC,EAAG,CAAC;IAC1E,CAAC;CACF","sourcesContent":["import * as React from \"react\";\nimport { View, findNodeHandle, ViewProps } from \"react-native\";\n\nimport { SharedElementNode } from \"./types\";\n\nexport type SharedElementProps = ViewProps & {\n  children: React.ReactNode;\n  onNode: (node: SharedElementNode | null) => void;\n};\n\nexport function nodeFromRef(\n  ref: any,\n  isParent?: boolean,\n  parentInstance?: any\n): SharedElementNode | null {\n  const nodeHandle = ref ? findNodeHandle(ref) : undefined;\n  return nodeHandle\n    ? {\n        ref,\n        nodeHandle,\n        isParent: isParent || false,\n        parentInstance\n      }\n    : null;\n}\n\nexport class SharedElement extends React.Component<SharedElementProps> {\n  componentDidUpdate(prevProps: SharedElementProps) {\n    if (!prevProps.onNode && this.props.onNode && this._node) {\n      this.props.onNode(this._node);\n    }\n  }\n\n  private _node: SharedElementNode | null = null;\n\n  private onSetRef = (ref: any) => {\n    this._node = nodeFromRef(ref, true, this);\n    if (this.props.onNode) {\n      this.props.onNode(this._node);\n    }\n  };\n\n  render() {\n    const {\n      onNode, //eslint-disable-line @typescript-eslint/no-unused-vars\n      ...otherProps\n    } = this.props;\n    return <View ref={this.onSetRef} collapsable={false} {...otherProps} />;\n  }\n}\n"]}