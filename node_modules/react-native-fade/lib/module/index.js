function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React, { useEffect, useState } from 'react';
import Animated, { Easing } from 'react-native-reanimated';
const {
  Value,
  timing
} = Animated;
const opacityValue = new Value(0);
const translationValue = new Value(0);

function Fade(props) {
  const {
    style,
    children,
    direction,
    visible,
    duration = 200
  } = props;
  const [isReady, setIsReady] = useState(false);
  useEffect(() => {
    opacityValue.setValue(visible ? 1 : 0);
    setIsReady(true);
  }, []);
  useEffect(() => {
    if (!isReady) return;
    const animationConfig = {
      duration: duration,
      easing: Easing.linear
    };

    const opacityConfig = _objectSpread(_objectSpread({}, animationConfig), {}, {
      toValue: visible ? 1 : 0
    });

    const directionConfig = direction === 'up' ? [0, 5] : [5, 0];

    const translationConfig = _objectSpread(_objectSpread({}, animationConfig), {}, {
      toValue: visible ? directionConfig[0] : directionConfig[1]
    });

    timing(opacityValue, opacityConfig).start();
    if (direction) timing(translationValue, translationConfig).start();
  }, [visible, isReady, direction, duration]);
  return /*#__PURE__*/React.createElement(Animated.View, {
    style: _objectSpread({
      opacity: opacityValue,
      transform: [{
        translateY: translationValue
      }]
    }, style)
  }, children);
}

export default Fade;
//# sourceMappingURL=index.js.map