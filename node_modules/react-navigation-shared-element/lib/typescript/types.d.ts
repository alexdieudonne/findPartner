/// <reference types="react" />
import { Route } from '@react-navigation/native';
import { SharedElementNode, SharedElementAnimation, SharedElementResize, SharedElementAlign, SharedElementTransitionProps } from 'react-native-shared-element';
export { SharedElementNode, SharedElementAnimation, SharedElementTransitionProps, };
export declare type NavigationEventName = 'focus' | 'blur' | 'transitionStart' | 'transitionEnd';
export declare type SharedElementEventSubscription = () => void;
export declare type SharedElementStrictConfig = {
    readonly id: string;
    readonly otherId: string;
    readonly animation: SharedElementAnimation;
    readonly resize?: SharedElementResize;
    readonly align?: SharedElementAlign;
    readonly debug?: boolean;
};
export declare type SharedElementsStrictConfig = SharedElementStrictConfig[];
export declare type SharedElementConfig = {
    readonly id: string;
    readonly otherId?: string;
    readonly animation?: SharedElementAnimation;
    readonly resize?: SharedElementResize;
    readonly align?: SharedElementAlign;
    readonly debug?: boolean;
} | string;
export declare type SharedElementsConfig = SharedElementConfig[];
export declare type SharedElementRoute<RouteName extends string = any, Params extends object = any> = Omit<Route<RouteName>, 'params'> & {
    params?: Params;
};
export declare type SharedElementsComponentConfig<Route extends SharedElementRoute = SharedElementRoute<any, any>, OtherRoute extends SharedElementRoute = SharedElementRoute<any, any>> = (route: Route, otherRoute: OtherRoute, showing: boolean) => SharedElementsConfig | undefined;
export declare type SharedElementSceneComponent = React.ComponentType<any> & {
    sharedElements?: SharedElementsComponentConfig;
};
