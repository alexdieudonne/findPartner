import { SharedElementNode, SharedElementEventSubscription, SharedElementSceneComponent, SharedElementRoute } from './types';
import { StackNavigationProp, StackCardInterpolationProps } from '@react-navigation/stack';
import { Animated } from 'react-native';
export declare type SharedElementSceneUpdateHandlerEventType = 'ancestor' | 'add' | 'remove';
export declare type SharedElementSceneUpdateHandler = (eventType: SharedElementSceneUpdateHandlerEventType, node: SharedElementNode | undefined, id: string) => any;
export declare type SharedElementSceneEventType = 'willFocus' | 'didFocus' | 'willBlur' | 'didBlur';
export default class SharedElementSceneData {
    private updateSubscribers;
    private ancestorNode?;
    private nodes;
    private animationContextValue?;
    readonly Component: SharedElementSceneComponent;
    readonly name: string;
    readonly navigatorId: string;
    readonly nestingDepth: number;
    navigation: StackNavigationProp<any>;
    route: SharedElementRoute<any>;
    constructor(Component: SharedElementSceneComponent, navigation: StackNavigationProp<any>, route: SharedElementRoute, navigatorId: string, nestingDepth: number);
    setAnimimationContextValue(value: StackCardInterpolationProps | undefined): void;
    getAnimValue(closing: boolean): Animated.AnimatedInterpolation | undefined;
    getAncestor(): SharedElementNode | undefined;
    setAncestor(ancestorNode: SharedElementNode | null): void;
    addNode(id: string, node: SharedElementNode): void;
    removeNode(id: string, node: SharedElementNode): void;
    getNode(id: string): SharedElementNode | undefined;
    addUpdateListener(handler: SharedElementSceneUpdateHandler): SharedElementEventSubscription;
    private emitUpdateEvent;
}
