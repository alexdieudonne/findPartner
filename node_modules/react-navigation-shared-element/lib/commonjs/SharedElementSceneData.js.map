{"version":3,"sources":["SharedElementSceneData.ts"],"names":["INVERT_OPTIONS","inputRange","outputRange","SharedElementSceneData","Component","navigation","route","navigatorId","nestingDepth","Set","undefined","name","displayName","constructor","value","animationContextValue","closing","progress","current","interpolate","ancestorNode","emitUpdateEvent","id","node","nodes","handler","updateSubscribers","add","delete","eventType","forEach"],"mappings":"ocAuBA,GAAMA,CAAAA,cAAc,CAAG,CACrBC,UAAU,CAAE,CAAC,CAAD,CAAI,CAAJ,CADS,CAErBC,WAAW,CAAE,CAAC,CAAD,CAAI,CAAJ,CAFQ,CAAvB,C,GAWqBC,CAAAA,sB,YAcnB,gCACEC,SADF,CAEEC,UAFF,CAGEC,KAHF,CAIEC,WAJF,CAKEC,YALF,CAME,iHAnB0B,GAAIC,CAAAA,GAAJ,EAmB1B,mDAlByCC,SAkBzC,4CAfE,EAeF,qYACA,KAAKN,SAAL,CAAiBA,SAAjB,CACA,KAAKC,UAAL,CAAkBA,UAAlB,CACA,KAAKC,KAAL,CAAaA,KAAb,CACA,KAAKC,WAAL,CAAmBA,WAAnB,CACA,KAAKC,YAAL,CAAoBA,YAApB,CACA,KAAKG,IAAL,CACEP,SAAS,CAACQ,WAAV,EACAR,SAAS,CAACO,IADV,GAECP,SAAS,CAACS,WAAV,CAAwBT,SAAS,CAACS,WAAV,CAAsBF,IAA9C,CAAqDD,SAFtD,GAGA,EAJF,CAKD,C,8HAE0BI,K,CAAgD,CACzE,KAAKC,qBAAL,CAA6BD,KAA7B,CACD,C,kDAEYE,O,CAA8D,IACjED,CAAAA,qBADiE,CACvC,IADuC,CACjEA,qBADiE,CAEzE,GAAI,CAACA,qBAAL,CAA4B,OAF6C,GAGjEE,CAAAA,QAHiE,CAGpDF,qBAAqB,CAACG,OAH8B,CAGjED,QAHiE,CAIzE,MAAOD,CAAAA,OAAO,CAAGC,QAAQ,CAACE,WAAT,CAAqBnB,cAArB,CAAH,CAA0CiB,QAAxD,CACD,C,iDAE4C,CAC3C,MAAO,MAAKG,YAAZ,CACD,C,gDAEWA,Y,CAAwC,CAElD,GAAI,KAAKA,YAAL,GAAsBA,YAA1B,CAAwC,OACxC,KAAKA,YAAL,CAAoBA,YAAY,EAAIV,SAApC,CACA,KAAKW,eAAL,CAAqB,UAArB,CAAiC,KAAKD,YAAtC,CAAoD,EAApD,EACD,C,wCAEOE,E,CAAYC,I,CAA+B,CAEjD,KAAKC,KAAL,CAAWF,EAAX,EAAiBC,IAAjB,CACA,KAAKF,eAAL,CAAqB,KAArB,CAA4BE,IAA5B,CAAkCD,EAAlC,EACD,C,8CAEUA,E,CAAYC,I,CAA+B,CAEpD,MAAO,MAAKC,KAAL,CAAWF,EAAX,CAAP,CACA,KAAKD,eAAL,CAAqB,QAArB,CAA+BE,IAA/B,CAAqCD,EAArC,EACD,C,wCAEOA,E,CAA2C,CACjD,MAAO,MAAKE,KAAL,CAAWF,EAAX,CAAP,CACD,C,4DAGCG,O,CACgC,gBAChC,KAAKC,iBAAL,CAAuBC,GAAvB,CAA2BF,OAA3B,EACA,MAAO,kBAAM,CAAA,KAAI,CAACC,iBAAL,CAAuBE,MAAvB,CAA8BH,OAA9B,CAAN,EAAP,CACD,C,wDAGCI,S,CACAN,I,CACAD,E,CACM,CACN,KAAKI,iBAAL,CAAuBI,OAAvB,CAA+B,SAAAL,OAAO,QAAIA,CAAAA,OAAO,CAACI,SAAD,CAAYN,IAAZ,CAAkBD,EAAlB,CAAX,EAAtC,EACD,C","sourcesContent":["import {\n  SharedElementNode,\n  SharedElementEventSubscription,\n  SharedElementSceneComponent,\n  SharedElementRoute,\n} from './types';\nimport {\n  StackNavigationProp,\n  StackCardInterpolationProps,\n} from '@react-navigation/stack';\nimport { Animated } from 'react-native';\n\nexport type SharedElementSceneUpdateHandlerEventType =\n  | 'ancestor'\n  | 'add'\n  | 'remove';\n\nexport type SharedElementSceneUpdateHandler = (\n  eventType: SharedElementSceneUpdateHandlerEventType,\n  node: SharedElementNode | undefined,\n  id: string\n) => any;\n\nconst INVERT_OPTIONS = {\n  inputRange: [0, 1],\n  outputRange: [1, 0],\n};\n\nexport type SharedElementSceneEventType =\n  | 'willFocus'\n  | 'didFocus'\n  | 'willBlur'\n  | 'didBlur';\n\nexport default class SharedElementSceneData {\n  private updateSubscribers = new Set<SharedElementSceneUpdateHandler>();\n  private ancestorNode?: SharedElementNode = undefined;\n  private nodes: {\n    [key: string]: SharedElementNode;\n  } = {};\n  private animationContextValue?: StackCardInterpolationProps;\n  public readonly Component: SharedElementSceneComponent;\n  public readonly name: string;\n  public readonly navigatorId: string;\n  public readonly nestingDepth: number;\n  public navigation: StackNavigationProp<any>;\n  public route: SharedElementRoute<any>;\n\n  constructor(\n    Component: SharedElementSceneComponent,\n    navigation: StackNavigationProp<any>,\n    route: SharedElementRoute,\n    navigatorId: string,\n    nestingDepth: number\n  ) {\n    this.Component = Component;\n    this.navigation = navigation;\n    this.route = route;\n    this.navigatorId = navigatorId;\n    this.nestingDepth = nestingDepth;\n    this.name =\n      Component.displayName ||\n      Component.name ||\n      (Component.constructor ? Component.constructor.name : undefined) ||\n      '';\n  }\n\n  setAnimimationContextValue(value: StackCardInterpolationProps | undefined) {\n    this.animationContextValue = value;\n  }\n\n  getAnimValue(closing: boolean): Animated.AnimatedInterpolation | undefined {\n    const { animationContextValue } = this;\n    if (!animationContextValue) return;\n    const { progress } = animationContextValue.current;\n    return closing ? progress.interpolate(INVERT_OPTIONS) : progress;\n  }\n\n  getAncestor(): SharedElementNode | undefined {\n    return this.ancestorNode;\n  }\n\n  setAncestor(ancestorNode: SharedElementNode | null) {\n    // console.log('SharedElementSceneData.setAncestor');\n    if (this.ancestorNode === ancestorNode) return;\n    this.ancestorNode = ancestorNode || undefined;\n    this.emitUpdateEvent('ancestor', this.ancestorNode, '');\n  }\n\n  addNode(id: string, node: SharedElementNode): void {\n    // console.log('SharedElementSceneData.addNode: ', id);\n    this.nodes[id] = node;\n    this.emitUpdateEvent('add', node, id);\n  }\n\n  removeNode(id: string, node: SharedElementNode): void {\n    // console.log('SharedElementSceneData.removeNode: ', id);\n    delete this.nodes[id];\n    this.emitUpdateEvent('remove', node, id);\n  }\n\n  getNode(id: string): SharedElementNode | undefined {\n    return this.nodes[id];\n  }\n\n  addUpdateListener(\n    handler: SharedElementSceneUpdateHandler\n  ): SharedElementEventSubscription {\n    this.updateSubscribers.add(handler);\n    return () => this.updateSubscribers.delete(handler);\n  }\n\n  private emitUpdateEvent(\n    eventType: SharedElementSceneUpdateHandlerEventType,\n    node: SharedElementNode | undefined,\n    id: string\n  ): void {\n    this.updateSubscribers.forEach(handler => handler(eventType, node, id));\n  }\n}\n"]}