{"version":3,"sources":["createSharedElementStackNavigator.tsx"],"names":["_navigatorId","createSharedElementStackNavigator","options","navigatorId","name","rendererDataProxy","SharedElementRendererProxy","SharedElementStackNavigator","initialRouteName","children","screenOptions","rest","StackRouter","state","descriptors","navigation","rendererDataRef","React","useRef","rendererData","current","SharedElementRendererData","source","undefined","navigatorFactory","Navigator","Screen","wrapComponent","component","CardAnimationContext","wrapScreen","_","getSharedElementsChildrenProps","Children","toArray","reduce","acc","child","isValidElement","type","push","props","Fragment","WrapNavigator","componentMapRef","Map","screenChildrenProps","map","sharedElementsConfig","childrenProps","sharedElements","has","set","wrappedComponent","get"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  useNavigationBuilder,\n  createNavigatorFactory,\n  StackRouter,\n  DefaultNavigatorOptions,\n  RouteConfig,\n  StackRouterOptions,\n  StackNavigationState,\n} from '@react-navigation/native';\nimport {\n  CardAnimationContext,\n  StackView,\n  StackNavigationOptions,\n} from '@react-navigation/stack';\nimport { SharedElementRendererProxy } from './SharedElementRendererProxy';\nimport SharedElementRendererContext from './SharedElementRendererContext';\nimport SharedElementRendererView from './SharedElementRendererView';\nimport SharedElementRendererData from './SharedElementRendererData';\nimport createSharedElementScene from './createSharedElementScene';\nimport {\n  SharedElementSceneComponent,\n  SharedElementsComponentConfig,\n} from './types';\nimport {\n  StackNavigationConfig,\n  StackNavigationEventMap,\n} from '@react-navigation/stack/lib/typescript/src/types';\n\nlet _navigatorId = 1;\n\nexport default function createSharedElementStackNavigator<\n  ParamList extends Record<string, object | undefined>\n>(options?: { name?: string }) {\n  const navigatorId =\n    options && options.name ? options.name : `stack${_navigatorId}`;\n  _navigatorId++;\n\n  const rendererDataProxy = new SharedElementRendererProxy();\n\n  type Props = DefaultNavigatorOptions<StackNavigationOptions> &\n    StackRouterOptions &\n    StackNavigationConfig;\n\n  function SharedElementStackNavigator({\n    initialRouteName,\n    children,\n    screenOptions,\n    ...rest\n  }: Props) {\n    const { state, descriptors, navigation } = useNavigationBuilder<\n      StackNavigationState,\n      StackRouterOptions,\n      StackNavigationOptions,\n      StackNavigationEventMap\n    >(StackRouter, {\n      initialRouteName,\n      children,\n      screenOptions,\n    });\n\n    const rendererDataRef = React.useRef<SharedElementRendererData | null>(\n      null\n    );\n\n    return (\n      <SharedElementRendererContext.Consumer>\n        {rendererData => {\n          // In case a renderer is already present higher up in the chain\n          // then don't bother creating a renderer here, but use that one instead\n          if (!rendererData) {\n            rendererDataRef.current =\n              rendererDataRef.current || new SharedElementRendererData();\n            rendererDataProxy.source = rendererDataRef.current;\n          } else {\n            rendererDataProxy.source = rendererData;\n          }\n          return (\n            <SharedElementRendererContext.Provider value={rendererDataProxy}>\n              <StackView\n                {...rest}\n                state={state}\n                navigation={navigation}\n                descriptors={descriptors}\n              />\n              {rendererDataRef.current ? (\n                <SharedElementRendererView\n                  rendererData={rendererDataRef.current}\n                />\n              ) : (\n                undefined\n              )}\n            </SharedElementRendererContext.Provider>\n          );\n        }}\n      </SharedElementRendererContext.Consumer>\n    );\n  }\n\n  const navigatorFactory = createNavigatorFactory<\n    StackNavigationState,\n    StackNavigationOptions,\n    StackNavigationEventMap,\n    typeof SharedElementStackNavigator\n  >(SharedElementStackNavigator);\n\n  const { Navigator, Screen } = navigatorFactory<ParamList>();\n\n  type ScreenProps<RouteName extends keyof ParamList> = Omit<\n    RouteConfig<\n      ParamList,\n      RouteName,\n      StackNavigationState,\n      StackNavigationOptions,\n      StackNavigationEventMap\n    >,\n    'component' | 'children'\n  > & {\n    component: SharedElementSceneComponent;\n    sharedElementsConfig?: SharedElementsComponentConfig;\n  };\n\n  function wrapComponent(component: SharedElementSceneComponent) {\n    return createSharedElementScene(\n      component,\n      rendererDataProxy,\n      CardAnimationContext,\n      navigatorId\n    );\n  }\n\n  // Wrapping Screen to explicitly statically type a \"Shared Element\" Screen.\n  function wrapScreen<RouteName extends keyof ParamList>(\n    _: ScreenProps<RouteName>\n  ) {\n    return null;\n  }\n\n  type NavigatorProps = React.ComponentProps<typeof Navigator>;\n\n  function getSharedElementsChildrenProps(children: React.ReactNode) {\n    return React.Children.toArray(children).reduce<any[]>((acc, child) => {\n      if (React.isValidElement(child)) {\n        if (child.type === wrapScreen) {\n          acc.push(child.props);\n        }\n\n        if (child.type === React.Fragment) {\n          acc.push(...getSharedElementsChildrenProps(child.props.children));\n        }\n      }\n      return acc;\n    }, []);\n  }\n\n  // react-navigation only allows the Screen component as direct children\n  // of Navigator, this is why we need to wrap the Navigator\n  function WrapNavigator(props: NavigatorProps) {\n    const { children, ...rest } = props;\n    const componentMapRef = React.useRef<Map<any, any>>(new Map());\n    const screenChildrenProps = getSharedElementsChildrenProps(children);\n\n    return (\n      <Navigator {...rest}>\n        {screenChildrenProps.map(\n          ({ component, sharedElementsConfig, ...childrenProps }) => {\n            if (sharedElementsConfig)\n              component.sharedElements = sharedElementsConfig;\n\n            if (!componentMapRef.current.has(component)) {\n              componentMapRef.current.set(component, wrapComponent(component));\n            }\n\n            const wrappedComponent = componentMapRef.current.get(component);\n\n            return (\n              <Screen\n                key={childrenProps.name}\n                {...childrenProps}\n                component={wrappedComponent}\n              />\n            );\n          }\n        )}\n      </Navigator>\n    );\n  }\n\n  return {\n    Navigator: WrapNavigator,\n    Screen: wrapScreen,\n  };\n}\n"]}