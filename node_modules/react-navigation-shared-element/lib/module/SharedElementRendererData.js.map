{"version":3,"sources":["SharedElementRendererData.ts"],"names":["getSharedElements","sceneData","otherSceneData","showing","sharedElements","Component","route","NO_SHARED_ELEMENTS","SharedElementRendererData","Set","closing","navigatorId","nestingDepth","isVerbose","console","debug","isTransitionStarted","prevRoute","routeAnimValue","scene","getScene","getAnimValue","name","isTransitionClosing","transitionNavigatorId","transitionNestingDepth","updateSceneListeners","updateSharedElements","sceneEvent","willFocusScene","didFocusScene","willBlurScene","registerScene","routeScene","scenes","push","subscription","length","splice","forEach","sceneRoute","isActive","key","addUpdateListener","emitUpdateEvent","find","sc","undefined","prevScene","sceneAnimValue","isShowing","JSON","stringify","handler","updateSubscribers","add","delete","map","id","otherId","other","startId","endId","position","start","ancestor","getAncestor","node","getNode","end"],"mappings":"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","sourcesContent":["import SharedElementSceneData, {\n  SharedElementSceneEventType,\n} from './SharedElementSceneData';\nimport {\n  SharedElementEventSubscription,\n  SharedElementsStrictConfig,\n  SharedElementTransitionProps,\n  SharedElementRoute,\n} from './types';\nimport { normalizeSharedElementsConfig } from './utils';\nimport { Animated } from 'react-native';\n\nexport type SharedElementRendererUpdateHandler = () => any;\n\nexport interface ISharedElementRendererData {\n  startTransition(\n    closing: boolean,\n    navigatorId: string,\n    nestingDepth: number\n  ): void;\n  endTransition(\n    closing: boolean,\n    navigatorId: string,\n    nestingDepth: number\n  ): void;\n  updateSceneState(\n    sceneData: SharedElementSceneData,\n    route: SharedElementRoute,\n    sceneEvent: SharedElementSceneEventType\n  ): void;\n  readonly nestingDepth: number;\n}\n\nfunction getSharedElements(\n  sceneData: SharedElementSceneData,\n  otherSceneData: SharedElementSceneData,\n  showing: boolean\n): SharedElementsStrictConfig | null {\n  const { sharedElements } = sceneData.Component;\n  if (!sharedElements) return null;\n  return normalizeSharedElementsConfig(\n    sharedElements(sceneData.route, otherSceneData.route, showing)\n  );\n}\n\nconst NO_SHARED_ELEMENTS: any[] = [];\n\ntype SceneRoute = {\n  scene: SharedElementSceneData;\n  route: SharedElementRoute;\n  subscription: SharedElementEventSubscription | null;\n};\n\n/**\n * TODO\n *\n * - [X] Start animation on `startTransition`\n * - [X] Use animValue from started navigator\n * - [X] Use route from deepest nested scene\n * - [X] Support nesting\n * - [ ] Not all lifecycle events not emitted by stack when using gestures (close modal)\n */\n\nexport default class SharedElementRendererData\n  implements ISharedElementRendererData {\n  private scenes: SceneRoute[] = [];\n  private updateSubscribers = new Set<SharedElementRendererUpdateHandler>();\n  private sharedElements: SharedElementsStrictConfig | null = null;\n  private isShowing: boolean = true;\n\n  private route: SharedElementRoute | null = null;\n  private prevRoute: SharedElementRoute | null = null;\n  private routeAnimValue?: Animated.AnimatedInterpolation | null;\n\n  private scene: SharedElementSceneData | null = null;\n  private prevScene: SharedElementSceneData | null = null;\n  private sceneAnimValue?: Animated.AnimatedInterpolation | null;\n\n  private isTransitionStarted: boolean = false;\n  private isTransitionClosing: boolean = false;\n  private transitionNavigatorId: string = '';\n  private transitionNestingDepth: number = -1;\n\n  private isVerbose: boolean = false;\n\n  startTransition(closing: boolean, navigatorId: string, nestingDepth: number) {\n    if (this.isVerbose)\n      console.debug(\n        `startTransition[${navigatorId}], closing: ${closing}, nestingDepth: ${nestingDepth}`\n      );\n\n    if (!this.isTransitionStarted || this.route) {\n      this.prevRoute = this.route;\n      this.route = null;\n      this.routeAnimValue = null;\n\n      // When a transition wasn't completely fully, but a new transition\n      // has already started, then the `willBlur` event is not called.\n      // For this particular case, we capture the animation-value of the\n      // last (previous) scene that is now being hidden.\n      if (this.isTransitionStarted) {\n        const scene = this.getScene(this.prevRoute);\n        if (scene) {\n          this.routeAnimValue = scene.getAnimValue(true);\n          if (this.isVerbose)\n            console.debug(\n              `startTransition[${navigatorId}] using Animated.Value from \"${scene.name}\", animValue: ${this.routeAnimValue}`\n            );\n        }\n      }\n\n      this.isTransitionStarted = true;\n      this.isTransitionClosing = closing;\n      this.transitionNavigatorId = navigatorId;\n      this.transitionNestingDepth = nestingDepth;\n    } else {\n      // When navigators are nested, `startTransition` may be called multiple\n      // times. In such as case, we want to use the most shallow navigator,\n      // as that is the one doing the transition.\n      if (nestingDepth < this.transitionNestingDepth) {\n        this.transitionNavigatorId = navigatorId;\n        this.transitionNestingDepth = nestingDepth;\n      }\n    }\n  }\n\n  endTransition(closing: boolean, navigatorId: string, nestingDepth: number) {\n    if (this.isVerbose)\n      console.debug(\n        `endTransition[${navigatorId}], closing: ${closing}, nestingDepth: ${nestingDepth}`\n      );\n\n    if (\n      !this.isTransitionStarted ||\n      this.transitionNavigatorId !== navigatorId\n    ) {\n      return;\n    }\n\n    this.isTransitionStarted = false;\n\n    if (this.prevRoute != null) {\n      this.prevRoute = null;\n      this.routeAnimValue = null;\n      this.updateSceneListeners();\n      this.updateSharedElements();\n    }\n  }\n\n  updateSceneState(\n    sceneData: SharedElementSceneData,\n    route: SharedElementRoute,\n    sceneEvent: SharedElementSceneEventType\n  ): void {\n    switch (sceneEvent) {\n      case 'willFocus':\n        return this.willFocusScene(sceneData, route);\n      case 'didFocus':\n        return this.didFocusScene(sceneData, route);\n      case 'willBlur':\n        return this.willBlurScene(sceneData, route);\n    }\n  }\n\n  willFocusScene(\n    sceneData: SharedElementSceneData,\n    route: SharedElementRoute\n  ): void {\n    if (this.isVerbose)\n      console.debug(\n        `willFocusScene[${sceneData.navigatorId}], name: \"${sceneData.name}\", depth: ${sceneData.nestingDepth}`\n      );\n    this.registerScene(sceneData, route);\n\n    // Wait for a transition start, before starting any animations\n    if (!this.isTransitionStarted) return;\n\n    // Use the animation value from the navigator that\n    // started the transition\n    if (\n      !this.isTransitionClosing &&\n      this.prevRoute &&\n      sceneData.navigatorId === this.transitionNavigatorId &&\n      !this.routeAnimValue\n    ) {\n      this.routeAnimValue = sceneData.getAnimValue(this.isTransitionClosing);\n      if (this.isVerbose)\n        console.debug(\n          `willFocusScene[${sceneData.navigatorId}] using Animated.Value from \"${sceneData.name}\", animValue: ${this.routeAnimValue}`\n        );\n    }\n\n    // In case of nested navigators, multiple scenes will become\n    // activated. Make sure to use the scene that is nested most deeply,\n    // as this will be the one visible to the user\n    if (!this.route) {\n      this.route = route;\n    } else {\n      const routeScene = this.getScene(this.route);\n      if (routeScene && routeScene.nestingDepth <= sceneData.nestingDepth) {\n        this.route = route;\n      }\n    }\n\n    // Update transition\n    if (this.prevRoute && this.route && this.routeAnimValue) {\n      this.updateSceneListeners();\n      this.updateSharedElements();\n    }\n  }\n\n  didFocusScene(\n    sceneData: SharedElementSceneData,\n    route: SharedElementRoute\n  ): void {\n    if (this.isVerbose)\n      console.debug(\n        `didFocusScene[${sceneData.navigatorId}], name: \"${sceneData.name}\", depth: ${sceneData.nestingDepth}`\n      );\n\n    if (!this.route || this.prevRoute) {\n      this.route = route;\n    } else {\n      const routeScene = this.getScene(this.route);\n      if (routeScene && routeScene.nestingDepth <= sceneData.nestingDepth) {\n        this.route = route;\n      }\n    }\n    this.prevRoute = null;\n    this.registerScene(sceneData, route);\n  }\n\n  willBlurScene(\n    sceneData: SharedElementSceneData,\n    // @ts-ignore\n    route: SharedElementRoute // eslint-disable-line @typescript-eslint/no-unused-vars\n  ): void {\n    if (this.isVerbose)\n      console.debug(\n        `willBlurScene[${sceneData.navigatorId}], name: \"${sceneData.name}\", depth: ${sceneData.nestingDepth}`\n      );\n\n    // Wait for a transition start, before starting any animations\n    if (!this.isTransitionStarted) return;\n\n    // Use the animation value from the navigator that\n    // started the transition\n    if (\n      this.isTransitionClosing &&\n      sceneData.navigatorId === this.transitionNavigatorId &&\n      !this.routeAnimValue\n    ) {\n      this.routeAnimValue = sceneData.getAnimValue(this.isTransitionClosing);\n      if (this.isVerbose)\n        console.debug(\n          `willBlurScene[${sceneData.navigatorId}] using Animated.Value from \"${sceneData.name}\", animValue: ${this.routeAnimValue}`\n        );\n    }\n\n    // Update transition\n    if (this.prevRoute && this.route && this.routeAnimValue) {\n      this.updateSceneListeners();\n      this.updateSharedElements();\n    }\n  }\n\n  private registerScene(\n    sceneData: SharedElementSceneData,\n    route: SharedElementRoute\n  ) {\n    this.scenes.push({\n      scene: sceneData,\n      route,\n      subscription: null,\n    });\n    if (this.scenes.length > 10) {\n      const { subscription } = this.scenes[0];\n      this.scenes.splice(0, 1);\n      if (subscription) subscription();\n    }\n    this.updateSceneListeners();\n    //this.updateSharedElements();\n  }\n\n  private updateSceneListeners() {\n    this.scenes.forEach(sceneRoute => {\n      const { scene, route, subscription } = sceneRoute;\n      const isActive =\n        (this.route && this.route.key === route.key) ||\n        (this.prevRoute && this.prevRoute.key === route.key);\n      if (isActive && !subscription) {\n        sceneRoute.subscription = scene.addUpdateListener(() => {\n          // TODO optimize\n          this.emitUpdateEvent();\n        });\n      } else if (!isActive && subscription) {\n        sceneRoute.subscription = null;\n        subscription();\n      }\n    });\n  }\n\n  private getScene(\n    route: SharedElementRoute | null\n  ): SharedElementSceneData | null {\n    const sceneRoute = route\n      ? this.scenes.find(sc => sc.route.key === route.key)\n      : undefined;\n    return sceneRoute ? sceneRoute.scene : null;\n  }\n\n  private updateSharedElements() {\n    const { route, prevRoute, routeAnimValue } = this;\n    const scene = this.getScene(route);\n    const prevScene = this.getScene(prevRoute);\n    const sceneAnimValue = routeAnimValue;\n\n    // Update current scene & previous scene\n    if (\n      scene === this.scene &&\n      prevScene === this.prevScene &&\n      sceneAnimValue === this.sceneAnimValue\n    )\n      return;\n    this.scene = scene;\n    this.prevScene = prevScene;\n    this.sceneAnimValue = sceneAnimValue;\n\n    // Update shared elements\n    let sharedElements: SharedElementsStrictConfig | null = null;\n    let isShowing = true;\n    if (sceneAnimValue && scene && prevScene) {\n      sharedElements = getSharedElements(scene, prevScene, true);\n      if (!sharedElements) {\n        isShowing = false;\n        sharedElements = getSharedElements(prevScene, scene, false);\n      }\n    }\n    if (this.sharedElements !== sharedElements) {\n      if (this.isVerbose)\n        console.debug(\n          `Transitioning from \"${prevScene?.name}\" to \"${\n            scene?.name\n          }\", elements: ${JSON.stringify(sharedElements)}`\n        );\n      this.sharedElements = sharedElements;\n      this.isShowing = isShowing;\n      /*console.log(\n        'updateSharedElements: ',\n        sharedElements,\n        ' ,isShowing: ',\n        isShowing,\n        ', animValue: ',\n        animValue\n      );*/\n      this.emitUpdateEvent();\n    }\n  }\n\n  addUpdateListener(\n    handler: SharedElementRendererUpdateHandler\n  ): SharedElementEventSubscription {\n    this.updateSubscribers.add(handler);\n    return () => this.updateSubscribers.delete(handler);\n  }\n\n  private emitUpdateEvent(): void {\n    this.updateSubscribers.forEach(handler => handler());\n  }\n\n  getTransitions(): SharedElementTransitionProps[] {\n    const {\n      sharedElements,\n      prevScene,\n      scene,\n      isShowing,\n      sceneAnimValue,\n      route,\n    } = this;\n\n    if (!sharedElements || !scene || !prevScene || !route)\n      return NO_SHARED_ELEMENTS;\n    return sharedElements.map(({ id, otherId, ...other }) => {\n      const startId = isShowing ? otherId || id : id;\n      const endId = isShowing ? id : otherId || id;\n      return {\n        key: route.key,\n        position: sceneAnimValue,\n        start: {\n          ancestor: (prevScene ? prevScene.getAncestor() : undefined) || null,\n          node: (prevScene ? prevScene.getNode(startId) : undefined) || null,\n        },\n        end: {\n          ancestor: (scene ? scene.getAncestor() : undefined) || null,\n          node: (scene ? scene.getNode(endId) : undefined) || null,\n        },\n        ...other,\n      };\n    });\n  }\n\n  get nestingDepth(): number {\n    return 0;\n  }\n}\n"]}