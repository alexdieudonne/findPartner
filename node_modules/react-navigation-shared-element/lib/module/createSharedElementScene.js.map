{"version":3,"sources":["createSharedElementScene.tsx"],"names":["styles","StyleSheet","create","container","flex","createSharedElementScene","Component","rendererData","AnimationContext","navigatorId","SharedElementSceneView","SharedElementSceneData","props","navigation","route","nestingDepth","closing","data","endTransition","value","sceneData","setAnimimationContextValue","ref","setAncestor","isActiveRoute","updateSceneState","InteractionManager","runAfterInteractions","subscriptions","willFocus","addListener","onWillFocus","willBlur","onWillBlur","transitionStart","transitionEnd","startTransition","Object","values","forEach","unsubscribe","onSetRef","onRenderAnimationContext","React","PureComponent","state","dangerouslyGetState","activeRoute","name"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { View, StyleSheet, InteractionManager } from 'react-native';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\nimport { nodeFromRef } from 'react-native-shared-element';\nimport SharedElementSceneData from './SharedElementSceneData';\nimport SharedElementSceneContext from './SharedElementSceneContext';\nimport {\n  SharedElementEventSubscription,\n  SharedElementSceneComponent,\n} from './types';\nimport { ISharedElementRendererData } from './SharedElementRendererData';\nimport { getActiveRoute } from './utils';\nimport {\n  StackNavigationProp,\n  StackCardInterpolationProps,\n} from '@react-navigation/stack';\nimport { Route } from '@react-navigation/native';\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n});\n\ntype PropsType = {\n  navigation: StackNavigationProp<any>;\n  route: Route<any>;\n};\n\nfunction createSharedElementScene(\n  Component: SharedElementSceneComponent,\n  rendererData: ISharedElementRendererData,\n  AnimationContext: React.Context<StackCardInterpolationProps | undefined>,\n  navigatorId: string\n): React.ComponentType<any> {\n  class SharedElementSceneView extends React.PureComponent<PropsType> {\n    private subscriptions: {\n      [key: string]: SharedElementEventSubscription;\n    } = {};\n    private sceneData: SharedElementSceneData = new SharedElementSceneData(\n      Component,\n      this.props.navigation,\n      this.props.route,\n      navigatorId,\n      rendererData.nestingDepth\n    );\n\n    componentDidMount() {\n      const { navigation } = this.props;\n      this.subscriptions = {\n        willFocus: navigation.addListener('focus', this.onWillFocus),\n        willBlur: navigation.addListener('blur', this.onWillBlur),\n        transitionStart: navigation.addListener(\n          'transitionStart',\n          this.transitionStart\n        ),\n        transitionEnd: navigation.addListener(\n          'transitionEnd',\n          this.transitionEnd\n        ),\n      };\n    }\n\n    transitionStart({ data: { closing } }: any) {\n      rendererData.startTransition(\n        closing,\n        navigatorId,\n        rendererData.nestingDepth\n      );\n    }\n\n    transitionEnd = ({ data: { closing } }: any) => {\n      rendererData.endTransition(\n        closing,\n        navigatorId,\n        rendererData.nestingDepth\n      );\n    };\n\n    componentWillUnmount() {\n      Object.values(this.subscriptions).forEach(unsubscribe => unsubscribe());\n    }\n\n    render() {\n      // console.log('SharedElementSceneView.render');\n      return (\n        <SharedElementSceneContext.Provider value={this.sceneData}>\n          <View\n            style={styles.container}\n            collapsable={false}\n            ref={this.onSetRef}\n          >\n            <AnimationContext.Consumer>\n              {this.onRenderAnimationContext}\n            </AnimationContext.Consumer>\n            <Component {...this.props} />\n          </View>\n        </SharedElementSceneContext.Provider>\n      );\n    }\n\n    private onRenderAnimationContext = (\n      value: StackCardInterpolationProps | undefined\n    ) => {\n      this.sceneData.setAnimimationContextValue(value);\n      return null;\n    };\n\n    componentDidUpdate() {\n      this.sceneData.navigation = this.props.navigation;\n    }\n\n    private onSetRef = (ref: any) => {\n      this.sceneData.setAncestor(nodeFromRef(ref));\n    };\n\n    private onWillFocus = () => {\n      const { navigation, route } = this.props;\n\n      //console.log('onWillFocus: ', navigation.state, activeRoute);\n      if (isActiveRoute(navigation, route)) {\n        rendererData.updateSceneState(this.sceneData, route, 'willFocus');\n        InteractionManager.runAfterInteractions(() => {\n          rendererData.updateSceneState(this.sceneData, route, 'didFocus');\n        });\n      }\n    };\n\n    private onWillBlur = () => {\n      const { route } = this.props;\n\n      //console.log('onWillBlur: ', navigation.state, activeRoute);\n      rendererData.updateSceneState(this.sceneData, route, 'willBlur');\n    };\n  }\n\n  hoistNonReactStatics(SharedElementSceneView, Component);\n  return SharedElementSceneView;\n}\n\nconst isActiveRoute = (\n  navigation: StackNavigationProp<any>,\n  route: Route<any>\n): boolean => {\n  const state = navigation.dangerouslyGetState();\n  const activeRoute = getActiveRoute(state);\n  return route.name === activeRoute.name;\n};\n\nexport default createSharedElementScene;\n"]}